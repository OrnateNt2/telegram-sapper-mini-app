// bot.js
require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');

if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã: —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
const GAME_ROWS = 5;
const GAME_COLS = 5;
const MINE_COUNT = 5;

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä –ø–æ chat_id
const games = {};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
function createGame(rows, cols, mineCount) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ
  const board = [];
  for (let r = 0; r < rows; r++) {
    board[r] = [];
    for (let c = 0; c < cols; c++) {
      board[r][c] = {
        mine: false,
        revealed: false,
        adjacent: 0,
      };
    }
  }
  
  // –°–ª—É—á–∞–π–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—ã
  let minesPlaced = 0;
  while (minesPlaced < mineCount) {
    const r = Math.floor(Math.random() * rows);
    const c = Math.floor(Math.random() * cols);
    if (!board[r][c].mine) {
      board[r][c].mine = true;
      minesPlaced++;
    }
  }
  
  // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      if (board[r][c].mine) continue;
      let count = 0;
      for (let dr = -1; dr <= 1; dr++) {
        for (let dc = -1; dc <= 1; dc++) {
          if (dr === 0 && dc === 0) continue;
          const nr = r + dr;
          const nc = c + dc;
          if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {
            if (board[nr][nc].mine) count++;
          }
        }
      }
      board[r][c].adjacent = count;
    }
  }
  
  return { board, rows, cols, mineCount, over: false, win: false };
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–æ–∫ (–µ—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ—Ç –º–∏–Ω)
function revealCell(game, r, c) {
  const cell = game.board[r][c];
  if (cell.revealed) return;
  cell.revealed = true;
  // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω –∏ –≤–æ–∫—Ä—É–≥ –Ω–æ–ª—å –º–∏–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π
  if (!cell.mine && cell.adjacent === 0) {
    for (let dr = -1; dr <= 1; dr++) {
      for (let dc = -1; dc <= 1; dc++) {
        if (dr === 0 && dc === 0) continue;
        const nr = r + dr;
        const nc = c + dc;
        if (nr >= 0 && nr < game.rows && nc >= 0 && nc < game.cols) {
          if (!game.board[nr][nc].revealed) {
            revealCell(game, nr, nc);
          }
        }
      }
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã: –≤—ã–∏–≥—Ä—ã—à, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –±–µ–∑ –º–∏–Ω
function isWin(game) {
  for (let r = 0; r < game.rows; r++) {
    for (let c = 0; c < game.cols; c++) {
      const cell = game.board[r][c];
      if (!cell.mine && !cell.revealed) return false;
    }
  }
  return true;
}

// –†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ –≤–∏–¥–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function renderBoard(game, revealAll = false) {
  const keyboard = [];
  for (let r = 0; r < game.rows; r++) {
    const row = [];
    for (let c = 0; c < game.cols; c++) {
      const cell = game.board[r][c];
      let text = '‚ùì'; // –∑–∞–∫—Ä—ã—Ç–∞—è –∫–ª–µ—Ç–∫–∞
      if (revealAll || cell.revealed) {
        if (cell.mine) {
          text = 'üí£';
        } else if (cell.adjacent > 0) {
          text = String(cell.adjacent);
        } else {
          text = '‚ñ´Ô∏è';
        }
      }
      // –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ: cell_—Ä—è–¥_—Å—Ç–æ–ª–±–µ—Ü
      row.push(Markup.button.callback(text, `cell_${r}_${c}`));
    }
    keyboard.push(row);
  }
  return Markup.inlineKeyboard(keyboard);
}

// –ö–æ–º–∞–Ω–¥–∞ /start: –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
bot.start(ctx => {
  const chatId = ctx.chat.id;
  const game = createGame(GAME_ROWS, GAME_COLS, MINE_COUNT);
  games[chatId] = game;
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞–ø—ë—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É:', renderBoard(game));
});

// –ö–æ–º–∞–Ω–¥–∞ /new: –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
bot.command('new', ctx => {
  const chatId = ctx.chat.id;
  const game = createGame(GAME_ROWS, GAME_COLS, MINE_COUNT);
  games[chatId] = game;
  ctx.reply('–ù–æ–≤–∞—è –∏–≥—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É:', renderBoard(game));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ (callback_query)
bot.on('callback_query', async ctx => {
  const chatId = ctx.chat.id;
  const game = games[chatId];
  if (!game || game.over) {
    return ctx.answerCbQuery('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /new –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.');
  }
  const data = ctx.callbackQuery.data;
  // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: cell_—Ä—è–¥_—Å—Ç–æ–ª–±–µ—Ü
  const parts = data.split('_');
  if (parts[0] === 'cell') {
    const r = parseInt(parts[1], 10);
    const c = parseInt(parts[2], 10);
    const cell = game.board[r][c];
    if (cell.revealed) {
      return ctx.answerCbQuery('–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.');
    }
    if (cell.mine) {
      // –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É ‚Äì –ø—Ä–æ–∏–≥—Ä—ã—à
      cell.revealed = true;
      game.over = true;
      await ctx.editMessageReplyMarkup(renderBoard(game, true).reply_markup);
      ctx.answerCbQuery('üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!');
      ctx.reply('üí• –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /new –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.');
    } else {
      revealCell(game, r, c);
      if (isWin(game)) {
        game.over = true;
        game.win = true;
        await ctx.editMessageReplyMarkup(renderBoard(game, true).reply_markup);
        ctx.answerCbQuery('üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!');
        ctx.reply('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–≤–µ–¥–∏—Ç–µ /new –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.');
      } else {
        await ctx.editMessageReplyMarkup(renderBoard(game).reply_markup);
        ctx.answerCbQuery();
      }
    }
  }
});

bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
