// bot.js
require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');

if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// ===== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ =====
const defaultSettings = { rows: 5, cols: 5, mines: 5 };

const difficulties = {
  easy:   { rows: 5,  cols: 5,  mines: 3 },
  medium: { rows: 7,  cols: 7,  mines: 10 },
  hard:   { rows: 10, cols: 10, mines: 20 }
};

// –û–±—ä–µ–∫—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ chat_id
const games = {};
const chatSettings = {};
const customRequests = {}; // true, –µ—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const gameMessages = {};   // id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞

// ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è =====
async function deletePreviousGameMessage(chatId, ctx) {
  if (gameMessages[chatId]) {
    try {
      await ctx.telegram.deleteMessage(chatId, gameMessages[chatId]);
      gameMessages[chatId] = null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }
}

// ===== –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã =====

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
function createGame(rows, cols, mineCount) {
  const board = [];
  for (let r = 0; r < rows; r++) {
    board[r] = [];
    for (let c = 0; c < cols; c++) {
      board[r][c] = {
        mine: false,
        revealed: false,
        adjacent: 0,
      };
    }
  }

  // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
  let minesPlaced = 0;
  while (minesPlaced < mineCount) {
    const r = Math.floor(Math.random() * rows);
    const c = Math.floor(Math.random() * cols);
    if (!board[r][c].mine) {
      board[r][c].mine = true;
      minesPlaced++;
    }
  }

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      if (board[r][c].mine) continue;
      let count = 0;
      for (let dr = -1; dr <= 1; dr++) {
        for (let dc = -1; dc <= 1; dc++) {
          if (dr === 0 && dc === 0) continue;
          const nr = r + dr;
          const nc = c + dc;
          if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {
            if (board[nr][nc].mine) count++;
          }
        }
      }
      board[r][c].adjacent = count;
    }
  }

  return { board, rows, cols, mineCount, over: false, win: false };
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–æ–∫, –µ—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ—Ç –º–∏–Ω
function revealCell(game, r, c) {
  const cell = game.board[r][c];
  if (cell.revealed) return;
  cell.revealed = true;
  if (!cell.mine && cell.adjacent === 0) {
    for (let dr = -1; dr <= 1; dr++) {
      for (let dc = -1; dc <= 1; dc++) {
        if (dr === 0 && dc === 0) continue;
        const nr = r + dr;
        const nc = c + dc;
        if (nr >= 0 && nr < game.rows && nc >= 0 && nc < game.cols) {
          if (!game.board[nr][nc].revealed) {
            revealCell(game, nr, nc);
          }
        }
      }
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É: –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
function isWin(game) {
  for (let r = 0; r < game.rows; r++) {
    for (let c = 0; c < game.cols; c++) {
      const cell = game.board[r][c];
      if (!cell.mine && !cell.revealed) return false;
    }
  }
  return true;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ –≤–∏–¥–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function renderBoard(game, revealAll = false) {
  const keyboard = [];
  for (let r = 0; r < game.rows; r++) {
    const row = [];
    for (let c = 0; c < game.cols; c++) {
      const cell = game.board[r][c];
      let text = '‚ùì'; // –∑–∞–∫—Ä—ã—Ç–∞—è –∫–ª–µ—Ç–∫–∞
      if (revealAll || cell.revealed) {
        if (cell.mine) {
          text = 'üí£';
        } else if (cell.adjacent > 0) {
          text = String(cell.adjacent);
        } else {
          text = '‚ñ´Ô∏è';
        }
      }
      // callback_data —Ñ–æ—Ä–º–∞—Ç–∞: cell_—Ä—è–¥_—Å—Ç–æ–ª–±–µ—Ü
      row.push(Markup.button.callback(text, `cell_${r}_${c}`));
    }
    keyboard.push(row);
  }
  return Markup.inlineKeyboard(keyboard);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function renderMainMenu() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('–ù–æ–≤–∞—è –∏–≥—Ä–∞', 'menu_new_game')],
    [Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'menu_settings')],
    [Markup.button.callback('–ü—Ä–∞–≤–∏–ª–∞', 'menu_help')]
  ]);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
function renderSettingsMenu() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('–õ–µ–≥–∫–æ', 'set_easy')],
    [Markup.button.callback('–ù–æ—Ä–º–∞–ª—å–Ω–æ', 'set_medium')],
    [Markup.button.callback('–°–ª–æ–∂–Ω–æ', 'set_hard')],
    [Markup.button.callback('–ö–∞—Å—Ç–æ–º', 'set_custom')],
    [Markup.button.callback('–ù–∞–∑–∞–¥', 'menu_back')]
  ]);
}

// ===== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ =====

// –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.start(ctx => {
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞–ø—ë—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é:', renderMainMenu());
});

// –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.command('menu', ctx => {
  ctx.reply('–ú–µ–Ω—é:', renderMainMenu());
});

// –ö–æ–º–∞–Ω–¥–∞ /new ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
bot.command('new', async ctx => {
  const chatId = ctx.chat.id;
  await deletePreviousGameMessage(chatId, ctx);
  const settings = chatSettings[chatId] || defaultSettings;
  const game = createGame(settings.rows, settings.cols, settings.mines);
  games[chatId] = game;
  const sentMsg = await ctx.reply('–ù–æ–≤–∞—è –∏–≥—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É:', renderBoard(game));
  gameMessages[chatId] = sentMsg.message_id;
});

// –ö–æ–º–∞–Ω–¥–∞ /settings ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.command('settings', ctx => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:', renderSettingsMenu());
});

// ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query =====
bot.on('callback_query', async ctx => {
  const data = ctx.callbackQuery.data;
  const chatId = ctx.chat.id;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  if (data.startsWith('menu_')) {
    if (data === 'menu_new_game') {
      const settings = chatSettings[chatId] || defaultSettings;
      await deletePreviousGameMessage(chatId, ctx);
      const game = createGame(settings.rows, settings.cols, settings.mines);
      games[chatId] = game;
      const sentMsg = await ctx.reply('–ù–æ–≤–∞—è –∏–≥—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É:', renderBoard(game));
      gameMessages[chatId] = sentMsg.message_id;
      return ctx.answerCbQuery();
    } else if (data === 'menu_settings') {
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:', renderSettingsMenu());
      return ctx.answerCbQuery();
    } else if (data === 'menu_help') {
      await ctx.editMessageText(
        '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –°–∞–ø—ë—Ä:\n' +
        '1. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏, —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –º–∏–Ω—É.\n' +
        '2. –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –∫–ª–µ—Ç–∫–∞ —Å —á–∏—Å–ª–æ–º ‚Äì –æ–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–∫–∞—Ö.\n' +
        '3. –ò–≥—Ä–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏.\n\n' +
        '–ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤–∞—è –∏–≥—Ä–∞", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.',
        renderMainMenu()
      );
      return ctx.answerCbQuery();
    } else if (data === 'menu_back') {
      await ctx.editMessageText('–ú–µ–Ω—é:', renderMainMenu());
      return ctx.answerCbQuery();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏ –∫–∞—Å—Ç–æ–º)
  if (data.startsWith('set_')) {
    if (data === 'set_easy') {
      chatSettings[chatId] = difficulties.easy;
      await ctx.answerCbQuery('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: –õ–µ–≥–∫–æ');
      await ctx.editMessageText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –õ–µ–≥–∫–æ', renderMainMenu());
      return;
    } else if (data === 'set_medium') {
      chatSettings[chatId] = difficulties.medium;
      await ctx.answerCbQuery('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: –ù–æ—Ä–º–∞–ª—å–Ω–æ');
      await ctx.editMessageText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –ù–æ—Ä–º–∞–ª—å–Ω–æ', renderMainMenu());
      return;
    } else if (data === 'set_hard') {
      chatSettings[chatId] = difficulties.hard;
      await ctx.answerCbQuery('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: –°–ª–æ–∂–Ω–æ');
      await ctx.editMessageText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –°–ª–æ–∂–Ω–æ', renderMainMenu());
      return;
    } else if (data === 'set_custom') {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      customRequests[chatId] = true;
      await ctx.answerCbQuery('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ROWS,COLS,MINES (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8,8,12)');
      await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ROWS,COLS,MINES\n–ù–∞–ø—Ä–∏–º–µ—Ä: 8,8,12');
      return;
    }
  }

  // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
  if (!games[chatId] || games[chatId].over) {
    return ctx.answerCbQuery('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /new –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ù–æ–≤–∞—è –∏–≥—Ä–∞" –≤ –º–µ–Ω—é.');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ (callback_data –≤–∏–¥–∞ cell_—Ä—è–¥_—Å—Ç–æ–ª–±–µ—Ü)
  if (data.startsWith('cell_')) {
    const parts = data.split('_');
    const r = parseInt(parts[1], 10);
    const c = parseInt(parts[2], 10);
    const game = games[chatId];
    const cell = game.board[r][c];

    if (cell.revealed) {
      return ctx.answerCbQuery('–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.');
    }

    if (cell.mine) {
      cell.revealed = true;
      game.over = true;
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º —Å —Ä–∞—Å–∫—Ä—ã—Ç—ã–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏
      await ctx.editMessageReplyMarkup(renderBoard(game, true).reply_markup);
      ctx.answerCbQuery('üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!');
      return ctx.reply('üí• –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /new –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ù–æ–≤–∞—è –∏–≥—Ä–∞" –≤ –º–µ–Ω—é.');
    } else {
      revealCell(game, r, c);
      if (isWin(game)) {
        game.over = true;
        game.win = true;
        await ctx.editMessageReplyMarkup(renderBoard(game, true).reply_markup);
        ctx.answerCbQuery('üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!');
        return ctx.reply('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–≤–µ–¥–∏—Ç–µ /new –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ù–æ–≤–∞—è –∏–≥—Ä–∞" –≤ –º–µ–Ω—é.');
      } else {
        await ctx.editMessageReplyMarkup(renderBoard(game).reply_markup);
        return ctx.answerCbQuery();
      }
    }
  }
});

// ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ =====
bot.on('text', async ctx => {
  const chatId = ctx.chat.id;
  // –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  if (customRequests[chatId]) {
    const text = ctx.message.text;
    const parts = text.split(',');
    if (parts.length !== 3) {
      await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ROWS,COLS,MINES (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8,8,12)');
      return;
    }
    const rows = parseInt(parts[0].trim(), 10);
    const cols = parseInt(parts[1].trim(), 10);
    const mines = parseInt(parts[2].trim(), 10);
    if (isNaN(rows) || isNaN(cols) || isNaN(mines) || rows <= 0 || cols <= 0 || mines <= 0 || mines >= rows * cols) {
      await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –∏ –º–∏–Ω –º–µ–Ω—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—Ç–æ–∫.');
      return;
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    chatSettings[chatId] = { rows, cols, mines };
    customRequests[chatId] = false;
    await ctx.reply(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${rows} —Å—Ç—Ä–æ–∫, ${cols} —Å—Ç–æ–ª–±—Ü–æ–≤, ${mines} –º–∏–Ω.`);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
});

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
